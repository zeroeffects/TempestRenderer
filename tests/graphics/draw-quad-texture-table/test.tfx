struct GlobalsDesc
{
    vec4 Transform;
    vec4 TextureID;
};

void GetResourceIndex(in uint packed_res_idx, out uint tex_slot, out uint tex_slice)
{
    tex_slot  = packed_res_idx >> 16;
    tex_slice = packed_res_idx & 0xFFFFu;
}

// The main reason is APIs that support some non-bindless weirdness for the old hardware sake.
resource buffer ResourcesTable
{
    sampler2DArray Textures[16];
}

structbuffer GlobalsDesc Globals;

vertex shader
{
    layout(vb_offset = 0, vb_format = RG32F) in vec2 Position;
    layout(vb_offset = 8, vb_format = RG32F) in vec2 TexCoord;

    flat out int DrawIndex;
    out vec2     InterpTexCoord;
    
    void main()
    {
        vec4 transform = Globals[tge_DrawID].Transform;
        DrawIndex = tge_DrawID;
        InterpTexCoord = TexCoord;
        gl_Position = vec4(Position.xy*transform.zw + transform.xy, 0.0, 1.0);
    }
}

fragment shader
{
    flat in int DrawIndex;
    in vec2     InterpTexCoord;

    out vec4    FragmentColor;

    void main()
    {
        vec4 tex_id = Globals[DrawIndex].TextureID;
        vec3 color = textureLod(Textures[uint(tex_id.z)], vec3(InterpTexCoord*tex_id.xy, float(tex_id.w)), 0.0).xyz;
        FragmentColor = vec4(color, 1.0);
    }
}