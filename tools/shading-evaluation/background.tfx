/*   The MIT License
 *
 *   Tempest Engine
 *   Copyright (c) 2014 Zdravko Velinov
 *
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 *
 *   The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *   THE SOFTWARE.
 */

constant buffer SceneParams
{
    vec3 CameraPosition;
    vec3 SunDirection;
}

struct GlobalsDesc
{
    mat4 ViewProjectionInverseTransform;
    vec4 CubeID;
};

resource buffer ResourcesTable
{
    sampler2DArray Textures[4];
    samplerCubeArray TextureCubes;
}

structbuffer GlobalsDesc Globals;

vertex shader
{
out vec3 InterpView;

flat out int DrawIndex;

void main()
{
    vec4 position = vec4(4.0*float(gl_VertexID & 1) - 1.0, 2.0*float(gl_VertexID & 2) - 1.0, 0.999999, 1.0);
    vec4 wpos = Globals[tge_DrawID].ViewProjectionInverseTransform * position;
    InterpView = normalize(wpos.xyz/wpos.w - CameraPosition);
    DrawIndex = tge_DrawID;
    gl_Position = position;
}
}

fragment shader
{
flat in int DrawIndex;
in vec3 InterpView;

out vec4 FragmentColor;

void main()
{
    vec4 cube_tex = Globals[DrawIndex].CubeID;
    vec3 color = texture(TextureCubes, vec4(InterpView, cube_tex.w)).xyz;
    FragmentColor = vec4(color, 1.0);
} 
}